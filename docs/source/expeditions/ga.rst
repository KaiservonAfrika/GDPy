Genetic Algorithm (GA)
======================

Overview
--------

Genetic algorithm is a popular global optimisation method to find stable structures. 
GA in gdpy makes use of functionalities in ``ase`` package and provides a user-friendly 
interface by YAML.

.. |ga| image:: ../../images/ga.svg
    :width: 800
    :align: middle

The workflow of a GA-based global optimisation is

    |ga|

The steps are

.. |CutAndSplice| image:: ../../images/CutAndSplice.png
    :width: 400
    :align: middle

#. Initial Population

    * Generate an initial population of structures.

    * Relax initial structures.

#. Iterate population until convergence.

    * **Selection**: Choose the best-*N* structures to form a new population.

    * **Crossover**: Use CutAndSplicePairing method to generate a new structure from two structures.
      This is critical to the success of GA. See the schema below. (Phys. Rev. Lett. 2012, 108, 126101.)

        |CutAndSplice|

    * **Mutation**: Each new structure (offspring) has a possibility to mutate that part of structures
      are modified.

    * **Minimisation**: Relax new structures.

    * **Convergence**: If the maximum number of generations (iterations) reaches.

#. Anaylse structures.

    * Find structures with target properties in all explored structures.


Example
-------

To use GA, the related commands are 

.. code-block:: shell

    # - run GA
    #   results would be written to current directory
    $ gdp -p ./worker.yaml task ./ga.yaml --run 10000

The GA input file contains several sections:

* task: Task type must be `ga`.

* database: All explored structures are stored in this file with suffix `.db`.

* property: Target property to minimise. (Only `energy` for now.)

* convergence: Convergence criteria, e.g., the maximum number of generation.

* population: Define how to organise a popultion.

    * init: 

        Number of structures in the initial generation.

    * gen: 

        Number of structures in the following generation. `size` is the total 
        number. `random` is the number of structures generated by the initial
        builder while the rest is generated by the crossover operator.
    
    * pmut:

        The probability for each crossover structure to mutate. 

* operators:

    * comparator:
    
        Explored structures are compared with each other. The probability of a structure 
        to be selected as a parent is inverse of the number of its similiar structures.
    
    * crossover:

        This is the most critical operator in GA. 
    
    * mutation: List of mutation operators.

        Each operator can be selected based on relative probabilities.

* builder: 
  
    Define the builder that generates random structures. See :ref:`random builders` for
    more details.


.. code-block:: yaml

    task: ga
    database: mydb.db
    property:
      target: energy
    convergence:
      generation: 10
    population:
      init:
        size: 20
      gen:
        size: 20
        random: 5
      pmut: 0.8 # prob of mutation
    operators: # here, define a bunch of operators
      comparator:
        name: InteratomicDistanceComparator
        kwargs:
          dE: 0.015
      crossover:
        name: CutAndSplicePairing
      mutation:
        - name: RattleMutation
          kwargs:
            prob: 1.0
        - name: MirrorMutation
          kwargs:
            prob: 1.0
    builder:
        ...
    
Application
-----------

.. include:: ../references.rst

#. |JPCC2022Xu|
#. |ACSCatal2022Xu|
#. |ACSCatal2023Han|
